# Travis Continuous Integration Configuration File, based on ..
language:
  - java
  - cpp
  - python
python:
  - "2.7"
compiler:
  - gcc
jdk: oraclejdk7
env:
  - ROS_DISTRO=groovy ROSWS=rosws BUILDER=rosbuild BUILD_PACKAGES="android_voice_message hrp4_pan_tilt startup local_app_manager jsk_pr2_core_apps android_image_view android_camera_viewer android_sensor_message jsk_android_gui jsk_smart_gui my_android_package" # jsk_android_setup jsk_android_gui_api9
  - ROS_DISTRO=hydro ROSWS=wstool BUILDER=catkin
  - ROS_DISTRO=groovy ROSWS=wstool BUILDER=catkin
matrix:
  allow_failures:
    - env: ROS_DISTRO=groovy ROSWS=rosws BUILDER=rosbuild BUILD_PACKAGES="android_voice_message hrp4_pan_tilt startup local_app_manager jsk_pr2_core_apps android_image_view android_camera_viewer android_sensor_message jsk_android_gui jsk_smart_gui my_android_package" # jsk_android_setup jsk_android_gui_api9
    - env: ROS_DISTRO=groovy ROSWS=wstool BUILDER=catkin
before_install: # Use this to prepare the system to install prerequisites or dependencies
  # prepare android
  - sudo apt-get update -qq
  - if [ `uname -m` = x86_64 ]; then sudo apt-get install -qq --force-yes libgd2-xpm ia32-libs ia32-libs-multiarch; fi
  - wget http://dl.google.com/android/android-sdk_r21.0.1-linux.tgz
  - tar xzf android-sdk_r21.0.1-linux.tgz
  - export ANDROID_HOME=$PWD/android-sdk-linux
  - export PATH=${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools
  # Install required Android components.
  - echo y | android update sdk --no-ui --force
  - echo y | android update sdk --all --filter android-10 --no-ui --force
  - echo y | android update sdk --all --filter android-13 --no-ui --force
  - echo y | android update sdk --all --filter build-tools-19.1.0 --no-ui --force
  # Define some config vars
  - export CI_SOURCE_PATH=$(pwd)
  - export REPOSITORY_NAME=${PWD##*/}
  - echo "Testing branch $TRAVIS_BRANCH of $REPOSITORY_NAME"
  - sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu precise main" > /etc/apt/sources.list.d/ros-latest.list'
  - wget http://packages.ros.org/ros.key -O - | sudo apt-key add -
  - sudo apt-get update -qq
  - sudo apt-get install -qq -y python-catkin-pkg python-rosdep python-wstool ros-$ROS_DISTRO-catkin ros-$ROS_DISTRO-ros python-rosinstall
  # MongoDB hack - I don't fully understand this but its for moveit_warehouse
  - sudo apt-get remove -y mongodb mongodb-10gen
  - sudo apt-get install -y mongodb-clients mongodb-server -o Dpkg::Options::="--force-confdef" # default actions
  ##### quick hack for missing python-tk on hrpsys/waitInput.py
  - sudo apt-get install -qq -y python-tk
  # Setup rosdep
  - sudo rosdep init
  - rosdep update
install: # Use this to install any prerequisites or dependencies necessary to run your build
  # Create workspace
  - mkdir -p ~/ros/ws_$REPOSITORY_NAME/src
  - cd ~/ros/ws_$REPOSITORY_NAME/src
  - $ROSWS init .
  - $ROSWS merge file://$CI_SOURCE_PATH/.rosinstall
  - if [ $ROSWS = rosws ] ; then $ROSWS merge /opt/ros/$ROS_DISTRO/.rosinstall; fi
  - $ROSWS update -j10
  - if [ $ROSWS = rosws ] ; then $ROSWS set --git $REPOSITORY_NAME https://dummy.com/dummy -y; fi
  - ln -s $CI_SOURCE_PATH . # Link the repo we are testing to the new workspace
  - cd ../
  # Install dependencies for source repos
  - find -L src -name package.xml -exec dirname {} \; | xargs -n 1 -i find {} -name manifest.xml | xargs -n 1 -i mv {} {}.deprecated
  - rosdep install -r -n --from-paths src --ignore-src --rosdistro $ROS_DISTRO -y
  - find -L src -name manifest.xml.deprecated | xargs -n 1 -i dirname {} | xargs -n 1 -i ln -sf `pwd`/{}/manifest.xml.deprecated `pwd`/{}/manifest.xml
  - if [ $BUILDER = rosbuild ]; then source src/setup.sh; rosdep install -r -n --from-paths src --ignore-src --rosdistro $ROS_DISTRO -y; fi
  - if [ $ROS_DISTRO = groovy ]; then sudo apt-get install ros-$ROS_DISTRO-visualization-msgs ros-$ROS_DISTRO-common-tutorials ros-$ROS_DISTRO-navigation ros-$ROS_DISTRO-audio-common; fi
before_script:
  - source /opt/ros/$ROS_DISTRO/setup.bash
  - export CATKIN_PACKAGES="`find $CI_SOURCE_PATH -name package.xml | xargs -n 1 dirname | xargs -n 1 basename`"
script: # All commands must exit with code 0 on success. Anything else is considered failure.
  - cd ~/ros/ws_$REPOSITORY_NAME
  - if [ $BUILDER = rosbuild ]; then source src/setup.sh; cd src; fi
  - rospack profile
  - if [ $BUILDER = catkin ]; then VERBOSE=1 catkin_make -j2; else rosmake $BUILD_PACKAGES --profile --pjobs=4 --disable-logging; fi
  - if [ $BUILDER = catkin ]; then if [ "$CATKIN_PACKAGES" != "" ]; then catkin_make test --pkg $CATKIN_PACKAGES; fi; else (cd `rospack find pr2eus`; make test); rosmake $BUILD_PACKAGES --test-only --disable-logging; fi
  - if [ $BUILDER = catkin ]; then catkin_make install; fi
  - if [ $BUILDER = catkin ]; then rm -fr devel src build; source install/setup.bash; else source setup.sh; fi
after_failure:
  - if [ -e ./build/Testing/Temporary/LastTest.log ]; then cat ./build/Testing/Temporary/LastTest.log; fi
  - find ${HOME}/.ros/test_results -type f -exec echo "== {} ==" \; -exec cat {} \;
  - for file in ${HOME}/.ros/log/rostest-*; do echo "=== $file ==="; cat $file; done
